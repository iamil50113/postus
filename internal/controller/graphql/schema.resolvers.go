package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"postus/internal/domain/model"
)

// ChildCommentsExist is the resolver for the childCommentsExist field.
func (r *commentResolver) ChildCommentsExist(ctx context.Context, obj *model.Comment) (bool, error) {
	return r.commService.ChildExist(ctx, obj.ID)
}

// ChildComments is the resolver for the childComments field.
func (r *commentResolver) ChildComments(ctx context.Context, obj *model.Comment) (*model.Comments, error) {
	return r.commService.ChildComments(ctx, obj.ID, 0)
}

// AddPost is the resolver for the addPost field.
func (r *mutationResolver) AddPost(ctx context.Context, userID int64, title string, body string, commentPermission bool) (int64, error) {
	return r.postService.AddPost(ctx, userID, title, body, commentPermission)
}

// AddComment is the resolver for the addComment field.
func (r *mutationResolver) AddComment(ctx context.Context, userID int64, postID int64, body string, parentCommentID int64) (int64, error) {
	return r.commService.NewComment(ctx, userID, postID, body, parentCommentID)
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post) (*model.Comments, error) {
	return r.commService.Comments(ctx, obj.ID, 0)
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	return r.postService.Posts(ctx)
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id *int64) (*model.Post, error) {
	if id == nil {
		return nil, fmt.Errorf("id not specified")
	}
	return r.postService.Post(ctx, *id)
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, postID int64, cursorID int64) (*model.Comments, error) {
	return r.commService.Comments(ctx, postID, cursorID)
}

// ChildComments is the resolver for the childComments field.
func (r *queryResolver) ChildComments(ctx context.Context, commentID int64, cursorID int64) (*model.Comments, error) {
	return r.commService.ChildComments(ctx, commentID, cursorID)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id *int64) (*model.User, error) {
	if id == nil {
		return nil, fmt.Errorf("id not specified")
	}
	return r.usrService.User(ctx, *id)
}

// NewComments is the resolver for the newComments field.
func (r *subscriptionResolver) NewComments(ctx context.Context, postID int64) (<-chan *model.Comment, error) {
	return r.subService.NewSubscribe(ctx, postID)
}

// Posts is the resolver for the posts field.
func (r *userResolver) Posts(ctx context.Context, obj *model.User) ([]*model.Post, error) {
	return r.postService.PostsForUser(ctx, obj.ID)
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
